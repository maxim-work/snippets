import asyncio
import logging
import os
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from database import db
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

class MessageForm(StatesGroup):
    text = State()
    image = State()

class ScheduleForm(StatesGroup):
    choose_message = State()
    choose_chat = State()
    choose_time = State()


def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úâÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), KeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")],
            [KeyboardButton(text="üìã –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"), KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")],
        ],
        resize_keyboard=True
    )
    return keyboard


def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


async def send_message_to_chat(chat_id: int, message_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
    try:
        if message_data['image_path'] and os.path.exists(message_data['image_path']):
            with open(message_data['image_path'], 'rb') as photo:
                await bot.send_photo(chat_id=chat_id, photo=photo, caption=message_data['text'])
        else:
            await bot.send_message(chat_id=chat_id, text=message_data['text'])
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
        return False


def parse_time_input(time_str: str):
    """–ü–∞—Ä—Å–∏—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        if re.match(r'^\d{1,2}:\d{2}$', time_str):
            # –§–æ—Ä–º–∞—Ç "HH:MM"
            hours, minutes = map(int, time_str.split(':'))
            send_time = datetime.now().replace(hour=hours, minute=minutes, second=0, microsecond=0)
            if send_time < datetime.now():
                send_time += timedelta(days=1)
            return send_time
        
        elif re.match(r'^\d+[mh]$', time_str.lower()):
            # –§–æ—Ä–º–∞—Ç "15m" –∏–ª–∏ "2h"
            value = int(time_str[:-1])
            unit = time_str[-1].lower()
            
            if unit == 'm':
                return datetime.now() + timedelta(minutes=value)
            elif unit == 'h':
                return datetime.now() + timedelta(hours=value)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É
        try:
            return datetime.fromisoformat(time_str.replace(' ', 'T'))
        except:
            pass
            
    except ValueError:
        pass
    
    return None


async def check_scheduled_messages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        pending_messages = await db.get_pending_messages()
        
        for message in pending_messages:
            success = await send_message_to_chat(message['chat_id'], {
                'text': message['text'],
                'image_path': message['image_path']
            })
            
            if success:
                await db.mark_as_sent(message['id'])
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {message['chat_title']}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π", reply_markup=get_main_keyboard())

@dp.message(F.text == "‚úâÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def add_message_command(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(MessageForm.text)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

@dp.message(MessageForm.text)
async def process_text(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_command(message, state)
        return
        
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
    await state.set_state(MessageForm.image)

@dp.message(Command("skip"), MessageForm.image)
async def skip_image(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    message_id = await db.add_message(user_data['text'])
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(F.photo, MessageForm.image)
async def process_image(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_dir = "images"
    os.makedirs(image_dir, exist_ok=True)
    image_path = f"{image_dir}/{message.photo[-1].file_id}.jpg"
    await bot.download(message.photo[-1], destination=image_path)
    
    message_id = await db.add_message(user_data['text'], image_path)
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(F.text == "üìã –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
async def show_messages(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    messages = await db.get_all_messages()
    if not messages:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    text = "üìã –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for msg in messages:
        text += f"#{msg['id']} - {msg['text'][:50]}...\n"
        text += f"–°–æ–∑–¥–∞–Ω–æ: {msg['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    await message.answer(text)

@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
async def show_chats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    chats = await db.get_all_chats()
    if not chats:
        await message.answer("üë• –ë–æ—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç.")
        return
    
    text = "üë• –ß–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
    for chat in chats:
        text += f"‚Ä¢ {chat['title']} (ID: {chat['chat_id']})\n"
    
    await message.answer(text)

@dp.message(F.text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
async def start_scheduling(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    messages = await db.get_all_messages()
    if not messages:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    chats = await db.get_all_chats()
    if not chats:
        await message.answer("‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for msg in messages:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"#{msg['id']}: {msg['text'][:30]}...",
                callback_data=f"choose_msg:{msg['id']}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(ScheduleForm.choose_message)

@dp.callback_query(F.data.startswith("choose_msg:"), ScheduleForm.choose_message)
async def choose_message_callback(callback: types.CallbackQuery, state: FSMContext):
    message_id = int(callback.data.split(":")[1])
    await state.update_data(message_id=message_id)
    
    chats = await db.get_all_chats()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for chat in chats:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=chat['title'],
                callback_data=f"choose_chat:{chat['chat_id']}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    await callback.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(ScheduleForm.choose_chat)
    await callback.answer()

@dp.callback_query(F.data.startswith("choose_chat:"), ScheduleForm.choose_chat)
async def choose_chat_callback(callback: types.CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split(":")[1])
    await state.update_data(chat_id=chat_id)
    
    await callback.message.edit_text(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 15:30 - —Å–µ–≥–æ–¥–Ω—è –≤ 15:30 (–µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, —Ç–æ –∑–∞–≤—Ç—Ä–∞)\n"
        "‚Ä¢ 30m - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ 2h - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
        "‚Ä¢ 2024-01-15 18:00 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
        reply_markup=None
    )
    await state.set_state(ScheduleForm.choose_time)
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@dp.message(ScheduleForm.choose_time)
async def process_time_input(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_command(message, state)
        return
    
    send_time = parse_time_input(message.text)
    if not send_time:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    user_data = await state.get_data()
    message_data = await db.get_message_by_id(user_data['message_id'])
    chats = await db.get_all_chats()
    chat_title = next((chat['title'] for chat in chats if chat['chat_id'] == user_data['chat_id']), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
    
    schedule_id = await db.add_scheduled_message(
        user_data['message_id'],
        user_data['chat_id'],
        send_time
    )
    
    scheduler.add_job(
        send_message_to_chat,
        trigger=DateTrigger(run_date=send_time),
        args=[user_data['chat_id'], message_data],
        id=f"msg_{schedule_id}"
    )
    
    await message.answer(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: #{user_data['message_id']}\n"
        f"üë• –ß–∞—Ç: {chat_title}\n"
        f"‚è∞ –í—Ä–µ–º—è: {send_time.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=get_main_keyboard()
    )
    await state.clear()


@dp.message(F.chat.type.in_({"group", "supergroup"}), F.new_chat_members)
async def on_bot_added_to_chat(message: types.Message):
    for user in message.new_chat_members:
        if user.id == (await bot.get_me()).id:
            chat_id = message.chat.id
            title = message.chat.title
            await db.add_chat(chat_id, title)
            await message.answer(f"‚úÖ –ß–∞—Ç '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
            logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: {title} ({chat_id})")


async def on_startup():
    await db.create_pool()
    logger.info("Database pool created")

    scheduler.add_job(
        check_scheduled_messages,
        'interval',
        minutes=1,
        next_run_time=datetime.now() + timedelta(seconds=10)
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    if db.pool:
        await db.pool.close()
    await bot.session.close()


async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())